Ext.data.JsonP.nodewindows_EventLogger({"tagname":"class","name":"nodewindows.EventLogger","extends":null,"mixins":[],"alternateClassNames":[],"aliases":{},"singleton":false,"requires":[],"uses":[],"enum":null,"override":null,"inheritable":null,"inheritdoc":null,"meta":{"since":"0.1.0"},"private":null,"id":"class-nodewindows.EventLogger","members":{"cfg":[{"name":"eventLog","tagname":"cfg","owner":"nodewindows.EventLogger","meta":{},"id":"cfg-eventLog"},{"name":"name","tagname":"cfg","owner":"nodewindows.EventLogger","meta":{},"id":"cfg-name"}],"property":[],"method":[{"name":"auditFailure","tagname":"method","owner":"nodewindows.EventLogger","meta":{},"id":"method-auditFailure"},{"name":"auditSuccess","tagname":"method","owner":"nodewindows.EventLogger","meta":{},"id":"method-auditSuccess"},{"name":"error","tagname":"method","owner":"nodewindows.EventLogger","meta":{},"id":"method-error"},{"name":"info","tagname":"method","owner":"nodewindows.EventLogger","meta":{},"id":"method-info"},{"name":"warn","tagname":"method","owner":"nodewindows.EventLogger","meta":{},"id":"method-warn"}],"event":[],"css_var":[],"css_mixin":[]},"linenr":1,"files":[{"filename":"eventlog.js","href":"eventlog.html#nodewindows-EventLogger"}],"html_meta":{"since":"        <p>Available since: <b>0.1.0</b></p>\n"},"statics":{"cfg":[],"property":[],"method":[],"event":[],"css_var":[],"css_mixin":[]},"component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"parentMixins":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/eventlog.html#nodewindows-EventLogger' target='_blank'>eventlog.js</a></div></pre><div class='doc-contents'><p>Use a <em>non-C++</em> based event logging utility with your Windows code.\nThis utility can write to the event log, making your logs visible from the Event Viewer.</p>\n\n<p>To create a logger:</p>\n\n<pre><code>var EventLogger = require('node-windows').EventLogger;\n\nvar log = new EventLogger('Hello World');\n\nlog.info('Basic information.');\nlog.warn('Watch out!');\nlog.error('Something went wrong.');\n</code></pre>\n\n<p>Looks similar to:</p>\n\n<p><img src=\"https://raw.github.com/coreybutler/node-windows/master/docs/eventlog.png\" alt=\"Event Logging in node-windows\" /></p>\n\n<p>Some lesser-used options are also available through node-windows event logging.</p>\n\n<p>   log.auditSuccess('AUser Login Success');\n   log.auditFailure('AUser Login Failure');</p>\n\n<p>Each log type (info, warn, error, auditSuccess, and auditFailure) method optionally accepts two additional\narguments, including a <em>code</em> and <em>callback</em>. By default, the event code is <code>1000</code> if not otherwise specified.\nTo provide a custom event code with a log message and write that message to the console, the following code could\nbe used:</p>\n\n<pre><code>log.info('Something different happened!', 1002, function(){\n  console.log('Something different happened!');\n});\n</code></pre>\n\n<p>By default, event logs are all part of the <code>APPLICATION</code> scope. However; it is also possible to use the <code>SYSTEM</code> log.\nTo do this, a configuration object must be passed to the new log:</p>\n\n<pre><code>var EventLogger = require('node-windows').EventLogger;\nvar log = new EventLogger({\n  source: 'My Event Log',\n  eventLog: 'SYSTEM'\n});\n</code></pre>\n        <p>Available since: <b>0.1.0</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-cfg'>Config options</h3><div class='subsection'><div id='cfg-eventLog' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='nodewindows.EventLogger'>nodewindows.EventLogger</span><br/><a href='source/eventlog.html#nodewindows-EventLogger-cfg-eventLog' target='_blank' class='view-source'>view source</a></div><a href='#!/api/nodewindows.EventLogger-cfg-eventLog' class='name expandable'>eventLog</a><span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a></span></div><div class='description'><div class='short'>The event log where messages should be written. ...</div><div class='long'><p>The event log where messages should be written. This is either <code>APPLICATION</code> or <code>SYSTEM</code>.</p>\n<p>Defaults to: <code>APPLICATION</code></p></div></div></div><div id='cfg-name' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='nodewindows.EventLogger'>nodewindows.EventLogger</span><br/><a href='source/eventlog.html#nodewindows-EventLogger-cfg-name' target='_blank' class='view-source'>view source</a></div><a href='#!/api/nodewindows.EventLogger-cfg-name' class='name expandable'>name</a><span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a></span></div><div class='description'><div class='short'>The source of the log information. ...</div><div class='long'><p>The source of the log information. This is commonly the title of an application\nor the Node.js script name (i.e. MyApp).</p>\n<p>Defaults to: <code>Node.js</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-auditFailure' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='nodewindows.EventLogger'>nodewindows.EventLogger</span><br/><a href='source/eventlog.html#nodewindows-EventLogger-method-auditFailure' target='_blank' class='view-source'>view source</a></div><a href='#!/api/nodewindows.EventLogger-method-auditFailure' class='name expandable'>auditFailure</a>( <span class='pre'>message, [code], [callback]</span> )</div><div class='description'><div class='short'>Log an audit failure message. ...</div><div class='long'><p>Log an audit failure message.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>message</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>The content of the log message.</p>\n</div></li><li><span class='pre'>code</span> : <a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a> (optional)<div class='sub-desc'><p>The event code to assign to the message.</p>\n<p>Defaults to: <code>1000</code></p></div></li><li><span class='pre'>callback</span> : <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a> (optional)<div class='sub-desc'><p>An optional callback to run when the message is logged.</p>\n</div></li></ul></div></div></div><div id='method-auditSuccess' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='nodewindows.EventLogger'>nodewindows.EventLogger</span><br/><a href='source/eventlog.html#nodewindows-EventLogger-method-auditSuccess' target='_blank' class='view-source'>view source</a></div><a href='#!/api/nodewindows.EventLogger-method-auditSuccess' class='name expandable'>auditSuccess</a>( <span class='pre'>message, [code], [callback]</span> )</div><div class='description'><div class='short'>Log an audit success message. ...</div><div class='long'><p>Log an audit success message.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>message</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>The content of the log message.</p>\n</div></li><li><span class='pre'>code</span> : <a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a> (optional)<div class='sub-desc'><p>The event code to assign to the message.</p>\n<p>Defaults to: <code>1000</code></p></div></li><li><span class='pre'>callback</span> : <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a> (optional)<div class='sub-desc'><p>An optional callback to run when the message is logged.</p>\n</div></li></ul></div></div></div><div id='method-error' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='nodewindows.EventLogger'>nodewindows.EventLogger</span><br/><a href='source/eventlog.html#nodewindows-EventLogger-method-error' target='_blank' class='view-source'>view source</a></div><a href='#!/api/nodewindows.EventLogger-method-error' class='name expandable'>error</a>( <span class='pre'>message, [code], [callback]</span> )</div><div class='description'><div class='short'>Log an error message. ...</div><div class='long'><p>Log an error message.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>message</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>The content of the log message.</p>\n</div></li><li><span class='pre'>code</span> : <a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a> (optional)<div class='sub-desc'><p>The event code to assign to the message.</p>\n<p>Defaults to: <code>1000</code></p></div></li><li><span class='pre'>callback</span> : <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a> (optional)<div class='sub-desc'><p>An optional callback to run when the message is logged.</p>\n</div></li></ul></div></div></div><div id='method-info' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='nodewindows.EventLogger'>nodewindows.EventLogger</span><br/><a href='source/eventlog.html#nodewindows-EventLogger-method-info' target='_blank' class='view-source'>view source</a></div><a href='#!/api/nodewindows.EventLogger-method-info' class='name expandable'>info</a>( <span class='pre'>message, [code], [callback]</span> )</div><div class='description'><div class='short'>Log an informational message. ...</div><div class='long'><p>Log an informational message.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>message</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>The content of the log message.</p>\n</div></li><li><span class='pre'>code</span> : <a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a> (optional)<div class='sub-desc'><p>The event code to assign to the message.</p>\n<p>Defaults to: <code>1000</code></p></div></li><li><span class='pre'>callback</span> : <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a> (optional)<div class='sub-desc'><p>An optional callback to run when the message is logged.</p>\n</div></li></ul></div></div></div><div id='method-warn' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='nodewindows.EventLogger'>nodewindows.EventLogger</span><br/><a href='source/eventlog.html#nodewindows-EventLogger-method-warn' target='_blank' class='view-source'>view source</a></div><a href='#!/api/nodewindows.EventLogger-method-warn' class='name expandable'>warn</a>( <span class='pre'>message, [code], [callback]</span> )</div><div class='description'><div class='short'>Log a warning message. ...</div><div class='long'><p>Log a warning message.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>message</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>The content of the log message.</p>\n</div></li><li><span class='pre'>code</span> : <a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a> (optional)<div class='sub-desc'><p>The event code to assign to the message.</p>\n<p>Defaults to: <code>1000</code></p></div></li><li><span class='pre'>callback</span> : <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a> (optional)<div class='sub-desc'><p>An optional callback to run when the message is logged.</p>\n</div></li></ul></div></div></div></div></div></div></div>"});